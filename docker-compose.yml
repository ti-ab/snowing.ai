version: "3.9"

services:
  user-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: users
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5433:5432"
    volumes:
      - ./docker/postgres/user/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend-network

  user-service:
    container_name: user-service
    build: ./services/user-service
    ports:
      - "8081:8081"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://user-db:5432/users
      - SPRING_DATASOURCE_USERNAME=user
      - SPRING_DATASOURCE_PASSWORD=password
    depends_on:
      - user-db
    networks:
      - backend-network

  agent-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: agents
      POSTGRES_USER: agent
      POSTGRES_PASSWORD: password
    ports:
      - "5434:5432"
    networks:
      - backend-network

  agent-service:
    container_name: agent-service
    build: ./services/agent-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://agent-db:5432/agents
      - SPRING_DATASOURCE_USERNAME=agent
      - SPRING_DATASOURCE_PASSWORD=password
    depends_on:
      - agent-db
    networks:
      - backend-network

  course-db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: courses
      POSTGRES_USER: course
      POSTGRES_PASSWORD: password
    ports:
      - "5435:5432"
    volumes:
      - ./docker/postgres/course/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend-network

  course-service:
    container_name: course-service
    build: ./services/course-service
    ports:
      - "8087:8087"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://course-db:5432/courses
      - SPRING_DATASOURCE_USERNAME=course
      - SPRING_DATASOURCE_PASSWORD=password
    depends_on:
      - course-db
    networks:
      - backend-network

  audio-service:
    build: ./services/audio-service
    ports:
      - "8083:8083"
    networks:
      - backend-network

  frontend-nextjs:
    container_name: frontend-nextjs
    build: ./frontend-nextjs
    ports:
      - "3000:3000"
    networks:
      - frontend-network
    environment:
      - NEXT_PUBLIC_API_USERS=http://localhost:8081/api/users
      - NEXT_PUBLIC_API_AGENTS=http://localhost:8082/api/agents
      - NEXT_PUBLIC_AUDIO_WS=ws://localhost:8083
      - AGENT_SERVICE_URL=http://nginx/api/agents
      - USER_SERVICE_URL=http://nginx/api/users

  lk-agent:
    build:
      context: ./services/multimodal-agent-node
    ports:
      - "8084:8084"
    networks:
      - backend-network

  nginx:
    image: nginx:latest
    container_name: nginx-gateway
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend-nextjs
      - user-service
      - agent-service
      - audio-service
    networks:
      - keycloak-network
      - frontend-network
      - backend-network

  keycloak_web:
      image: quay.io/keycloak/keycloak:26.3.2
      container_name: keycloak_web
      environment:
        KC_DB: postgres
        KC_DB_URL: jdbc:postgresql://keycloakdb:5432/keycloak
        KC_DB_USERNAME: keycloak
        KC_DB_PASSWORD: password

        KC_HOSTNAME: localhost
        KC_HOSTNAME_PORT: 8080
        KC_HOSTNAME_STRICT: false
        KC_HOSTNAME_STRICT_HTTPS: false

        KC_LOG_LEVEL: info
        KC_METRICS_ENABLED: true
        KC_HEALTH_ENABLED: true
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: admin
        KC_IMPORT: /opt/keycloak/data/import/ProfAgents-realm.json
      command: start-dev --import-realm
      volumes:
        - ./keycloak/export:/opt/keycloak/data/import
      depends_on:
        - keycloakdb
      ports:
        - 8080:8080
      networks:
        - keycloak-network
        - frontend-network

  keycloakdb:
    image: postgres:15
    volumes:
        - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - keycloak-network

volumes:
  postgres_data:

networks:
  frontend-network:
  keycloak-network:
  backend-network: